Refocus paper
Review OSDI reviews
- common general feedback: "I cannot tell whether kudos reached its goals"

Change the name of "dependencies" to something else?
- Leaders and followers?

Abstract/Intro:
- One reviewer did not understand the paper until Conclusion's first sentence.
  Add a sentence like it to the paper's start?
	"Kudos provides a new way for file system implementations to
	formalize write ordering requirements, allowing such software to be
	divided into modules which cooperate loosely to implement strong
	consistency guarantees."

Introduction:
	* Implementation experience is preliminary?

Related Work, Applications:
	* If they're so easy, why haven't we done them?

Design, Change Descriptors:
- Do we want to jump right into "definition" without a mini-introduction?
- Add formalisms for merge and hard patch optimizations
- Prove theorems?
- Integrate formals into the paper
- Figure out how to introduce
- Describe merging and hard patches

Modules:
- Explore modules not possible within a stackable file system (reviewer)
- We say that we will describe the modules that contribute most to
  change descriptor functionality, but the only such module here is the
  write-back cache. We should probably rethink this section heading, and
  add information about the revisioning code and how change descriptor
  states are propagated. Some of this gets close to information you'd
  find in the change descriptor section though.

Write ext2 section.

Make directory synchronous module.

Opgroups:
- Simplify interface? (Since we do not do transacations)
- Improve imap evaluation re reviews?
  - Add macro benchmarks
- Show more types of consistency requirements (eg CVS [check], database)
- Compare data journaling (unnecessarily strict) vs minimal opgroups
- Write about gzip
- Write about svn+opgroups including svn's two assumptions and a crash test (?)
  - Figure out: how does MacOSX HFS+ journaling work?
- Do tar, then rm: shell or utility depend?

Implementation:
- Get us to pass fsck.ext2?

Evaluation:
- Really improve compared to OSDI submission. Figure out how.
- Add postmark?
- Show how patches make file system writing simpler? (One reviewer asked?)
- Update numbers for current systems and add full/metadata-only journaling
- Understand and describe why re our current numbers
- Improve our current numbers
  - Are unnecessarily strict dependencies hurting speed?
  - Should we improve our disk write notification usage?
  - Complete helpful ext2 optimizations?

Related workd:
- Linux 2.6.17 sync_file_range range system call
- fdatasync?
- Cite type-safe disks
- Cite rethink the sync
- Cite Burnett's asynchronous graph (45D3C85B.3060903@cs.ucla.edu)
- Cite "forder" primitive in the Echo file system by Mann et al (reviewer)

Misc:
- look at BSD implementation of soft updates; how does it work?
- ascii art at the top of journal_bd.c that could be made into a diagram
- ufs implementation becomes a diagram


ACM wants us to show that we:
* are attacking a significant problem,
* have devised an interesting, compelling solution,
* have demonstrated the practicality and benefits of the solution,
* have drawn appropriate conclusions,
* have clearly described what they have done, and
* have clearly articulated the advances beyond previous work.
