* Must Do
- Ensure no widows

* Want To Do
- Cite http://www.fsl.cs.sunysb.edu/project-kbdb.html?
- Cite http://www.fsl.cs.sunysb.edu/project-amino.html?


* No Time To Do
- Note that we do not know why kudos is slowish at postmark?
- Improve postmark perf
- Speed up imap/svn SU
- Give Linux ext2 SU
/ Patchgroups: less consistency flag
/ Make allocated data block init depend on prev free, not alloc
/ Update kudos to not commit file system summary data on fsync



* Paper

Related work:
- ext2?
	http://web.mit.edu/tytso/www/linux/ext2intro.html
	http://www.nongnu.org/ext2-doc/ext2.html
- recent stackable: https://ols2006.108.redhat.com/2007/Reprints/sipek-Reprint.pdf ?

Patchgroups:
- Note that our journal + patches implementation is not optimally efficient
- Add macro imap benchmarks?
- Compare data journaling (unnecessarily strict) vs minimal opgroups
- Do svn+opgroups crash test?
- Figure out: how does MacOSX HFS+ journaling work?

Modules:
- Explore modules not possible within a stackable file system (osdi reviewer)

Eval:
- Describe what uses system time
- More fully explain allocator differences and the effects

Misc:
- Look at BSD implementation of soft updates; how does it work?

* Kudos

- Decrease cpu usage
- Ensure correct directory ordering (delete a; touch a)
- Import linux ext2 allocator?
- Enhance journaling mode to merge intra-txn patches?
- Add more consistency modules?
- Add patch undo?
	- On hold because it needs dependency count tracking?
	- But maybe do not write dirty but freed data blocks?
- patchgroups: what if an application doesn't care about mtime?
- Optimize renames (to make SU andrew faster and make patch opts work better?)
- Optimize journal patches
- Speed up revision_tail_* if it is still slow (iteration)

* Benchmarking

- Add SU to Linux ext2?
- Add gzip benchmark
- Add svn benchmark
- Benchmark ext3 with barriers?
